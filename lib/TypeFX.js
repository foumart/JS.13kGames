var TypeFX = (function() {
	var symbols=[
		// 32 empty characters will be added here with Array.unshift
		
		[[,,,5],[,6]],																// ! (33)
		[[,,,2], [2,,,2]],															// " (34)
		
		[[1,,,7], [3,,,7], [,2,5], [,4,5]],											// #
		[[1,1,4], [,2], [1,3,3], [4,4], [,5,4], [2,,,7]],							// $
		[[,5,,2], [1,4], [2,3], [3,2], [4,,,2], [,1], [4,5]],						// %
		[[1], [,1], [,3,,3], [1,2], [2,1], [1,6,2], [4,6], [3,4,,2], [4,3], [2,3]],	// &
		
		[[,,,2]],																	// ' (39)
		[[,2,,3], [1,1], [1,5], [2], [2,6]],										// ( (40)
		[[2,2,,3], [1,1], [1,5], [], [,6]],											// ) {41}
		[[,2], [,4], [1,3,3], [2,1,,5], [4,2], [4,4]],								// * (42)
		[[,3,5], [2,1,,5]],															// + (43)
		[[1,6,,2], [,8]],															// , (44)
		[[,3,5]],																	// -
		[[,6]],																		// .
		[[,6], [1,4,,2], [2,3], [3,1,,2], [4]],										// / (47)
		
		// smaller numbers
		//[[,,4], [,,,5], [,4,4], [3,,,5]],
		//[[,1], [1,,,4], [,4,3]],
		//[[,,4], [3,,,2], [1,2,2], [,3], [,4,4]],
		//[[,,4], [,4,4], [1,2,3], [3,,,5]],
		//[[2,,,5], [1,1], [,2,,2], [1,3], [3,3]],
		//[[,,4], [,1], [,2,4], [3,2,,3], [,4,4]],
		//[[,,4], [,,,5], [,4,4], [1,2,2], [3,3,,2]],
		//[[,,4], [3,1], [2,2], [1,3,,2]],
		//[[,,4], [,,,5], [3,,,5], [,2,4], [,4,4]],
		//[[,,4], [,,,3], [,2,3], [3,,,4], [,4,3]],
		
		[[1,,3], [,1,,5], [1,6,3], [4,1,,5], [1,4], [2,3], [3,2]],					// 0 (48)
		[[,1], [1,,,6], [,6,3]],													// 1
		[[,1], [1,,3], [4,1,,2], [3,3], [2,4], [1,5], [,6,5]],						// 2
		[[,1], [1,,3], [4,1,,2], [4,4,,2], [,5], [1,6,3], [2,3,2]],					// 3
		[[,3], [1,2], [2,1], [,4,5], [3,,,7]],										// 4
		[[,,5], [,1], [,2,4], [4,3,,3], [,5], [1,6,3]],								// 5
		[[1,,3], [4,1], [,1,,5], [1,6,3], [1,3,3], [4,4,,2], [2,8]],				// 6
		[[,,5], [4,1,,2], [3,3,,2], [2,5,,2]],										// 7
		[[1,,3], [,1,,2], [4,1,,2], [,4,,2], [4,4,,2], [1,3,3], [1,6,3]],			// 8
		[[1,,3], [,1,,2], [1,3,3], [4,1,,5], [1,6,3], [,5], [2,8]],					// 9 (57)
		
		[[,2], [,5]],																// :
		[[1,2], [1,4,,2], [,6]],													// ; (59)
		[[,3], [1,2], [1,4], [2,1], [2,5]],											// < (60)
		[[,2,5], [,4,5]],															// = (61)
		[[2,3], [1,2], [1,4], [,1], [,5]],											// > (62)
		[[,1], [1,,3], [4,1,,2], [3,3], [2,4], [2,6]],								// ?
		[[2,,2], [1,1],[,2,,4], [1,6,3], [4,3,,3], [3,2], [2,3,,2]],				// @
		
		[[,1,,6], [4,1,,6], [1,,3], [,3,4]],										// A (65)
		[[,,4], [,,,7], [,3,4], [,6,4], [4,1,,2], [4,4,,2]],						// B
		[[1,,3], [,1,,5], [1,6,3], [4,5], [4,1]],									// C
		[[,,,7], [,,4], [,6,4], [4,1,,5]],											// D
		[[,,5], [,3,4], [,6,5], [,,,7]],											// E
		[[,,5], [,3,4], [,,,7]],													// F (70)
		[[1,,3],[,1,,5], [1,6,3], [4,5], [3,4,2], [4,1]],							// G
		[[,,,7], [4,,,7], [1,3,3]],													// H
		[[,,3], [,6,3], [1,1,,5]],													// I
		[[4,,,6], [1,6,3], [,5]],													// J
		[[,,,7], [1,3], [2,2], [2,4], [3,1], [4], [3,5], [4,6]],					// K (75)
		[[,,,7], [1,6,4]],															// L
		[[,,,7], [1,2], [3,2], [2,3], [4,,,7]],										// M
		[[,,,7], [1,2], [2,3], [3,4], [4,,,7]],										// N
		[[1,,3], [,1,,5], [1,6,3], [4,1,,5]],										// O
		[[,,,7], [,,4], [,3,4], [4,1,,2]],											// P
		[[1,,3], [,1,,5], [1,6,3], [4,1,,5], [4,7]],								// Q (81)
		[[,,,7], [,,4], [,3,4], [4,1,,2], [4,4,,3]],								// R
		[[1,,4], [,1,,2], [1,3,3], [4,4,,2], [,6,4]],								// S
		[[,,5], [2,,,7]],															// T
		[[,,,6], [1,6,3], [4,,,6]],													// U (85)
		[[,,,3], [4,,,3], [1,3,,2], [3,3,,2], [2,5,,2]],							// V
		[[,,,7], [1,5], [2,4], [3,5], [4,,,7]],										// W
		[[,,,2], [4,,,2], [,5,,2], [4,5,,2], [1,2], [3,2], [2,3], [1,4], [3,4]],	// X
		[[,,,2], [4,,,2], [1,2], [3,2], [2,3,,4]],									// Y
		[[,,5], [,6,5], [,5], [1,4], [2,3], [3,2], [4,1]],							// Z (90)
		
		[[,,,7], [1,,2], [1,6,2]],													// [
		[[4,6], [3,4,,2], [2,3], [1,1,,2], []],										// \
		[[2,,,7], [,,2], [,6,2]],													// ]
		[[,1], [1], [2,1]],															// ^
		[[,7,5]],																	// _
		[[], [1,1]],																// `
		
		[[1,2,2], [,3,,3],[1,6,2], [3,2,,5]],										// a (97)
		[[,,,7], [,2,3], [,6,3], [3,3,,3]],											// b
		[[,3,,3], [1,2,2], [1,6,2], [3,3], [3,5]],									// c
		[[3,,,7], [1,2,2], [1,6,2], [,3,,3]],										// d (100)
		[[1,2,2], [,3,,3], [1,6,2], [3,3], [,4,4]],									// e
		[[1,1,,6], [,3,3], [2]],													// f
		[[1,2,2], [,3,,3],[1,6,2], [3,2,,6], [1,8,2]],								// g (103)
		[[,,,7], [,2,3], [3,3,,4]],													// h
		[[1,2,,5], [1], [,2]],														// i
		[[1,2,,5], [1], [,2], [,7]],												// j
		[[,,,7], [1,4], [2,3], [2,5], [3,2], [3,6]],								// k
		[[,,,6], [1,6]],															// l
		[[,2,,5], [2,3,,4], [4,3,,4], [,2,4]],										// m
		[[,2,,5], [3,3,,4], [,2,3]],												// n (110)
		[[1,2,2], [,3,,3], [1,6,2], [3,3,,3]],										// o
		[[,2,3], [,2,,7],[,6,3], [3,3,,3]],											// p
		[[1,2,2], [3,2,,7],[1,6,2], [,3,,3]],										// q
		[[,2,,5], [1,3], [2,2,2]],													// r
		[[1,2,3], [1,4,2], [,6,3], [,3], [3,5]],									// s
		[[1,,,6], [,2,3], [2,6]],													// t (116)
		[[,2,,4], [1,6,2], [3,2,,4]],												// u
		[[,2,,5], [3,2,,3], [1,6], [2,5]],											// v
		[[,2,,4], [2,2,,4], [4,2,,4], [1,6], [3,6]],								// w
		[[,2,,2], [1,4,2], [3,2,,2], [,5,,2], [3,5,,2]],							// x
		[[,2,,4],[1,6,2], [3,2,,6], [1,8,2]],										// y
		[[,2,4], [3,3], [1,4,2], [,5], [,6,4]],										// z (122)
		
		[[1,1,,2], [1,4,,2], [2], [2,6], [,3]],										// {
		[[1,,,9]],																	// |
		[[1,1,,2], [1,4,,2], [], [,6], [2,3]]										// }
	], spaces = [], i, j, k, h, w;
	
	for(i = 0; i < 33; i++) symbols.unshift([]);
	for(i = 0; i < symbols.length; i++) {
		if(i==33 || i==39 || i==46 || i==58) spaces.push(1);
		else if([32,44,59,96,105,106,108].indexOf(i) >- 1) spaces.push(2);
		else if([34,40,41,49,60,62,73,91,93,94,102,116,123,124,125].indexOf(i) >- 1) spaces.push(3);
		else if(i>96 && i!=109 && i!=119) spaces.push(4);
		else spaces.push(5);
	}
	
	function drawDiggit(_element, _diggit, _size, _color){
		if(!parseInt(_diggit)) _diggit = _diggit.charCodeAt(0);
		if(!_color) _color = "white";
		if(!_size) _size = 1;
		var canvas = document.createElement("canvas");
		canvas.width = _size * spaces[_diggit];
		canvas.height = _size * 10;
		var context = canvas.getContext("2d");
		context.fillStyle = _color;
		if(symbols[_diggit]){
			for(i = 0; i < symbols[_diggit].length; i++){
				if(symbols[_diggit][i].length == 4) {
					h = symbols[_diggit][i][3]; w = 1;
				} else if(symbols[_diggit][i].length == 3) {
					w = symbols[_diggit][i][2]; h = 1;
				} else {w = 1; h = 1;}
				context.beginPath();
				context.rect(symbols[_diggit][i][0]*_size||0, ((symbols[_diggit][i][1]||0)+1)*_size, w*_size, h*_size);
				context.fill();
			}
		}
		_element.appendChild(canvas);
		return canvas;
	}
	
	function drawText(_element, _text, _size, _leading){
		var _letter;
		var lines = _text.split("\r");
		var widths = [];
		for(k = 0; k < lines.length; k++){
			widths.push(0);
			for(j = 0; j < lines[k].length; j++){
				_letter = drawDiggit(_element, lines[k].charCodeAt(j), _size);
				_letter.style.position = "absolute";
				_letter.style.left = widths[k]+"px";
				_letter.style.top = (k) ? (k*_size*10 + (k*_leading||0))+"px" : 0;
				widths[k] += _letter.width + _size;
			}
		}
		_element.style.width = Math.max.apply(this, widths)+"px";
		_element.style.height = (lines.length*_size*10 + (lines.length*_leading||0))+"px";
	}
	
	return{
		symbols:symbols,
		drawDiggit:drawDiggit,
		drawText:drawText
	}
})();
